# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred
# divisors?
import math

def factorize(num):
    num_factors = 0
    # the highest factor that we need to check will be the square root
    # of the number
    for i in range(1, int(math.sqrt(num)) + 1):
        if num % i == 0:
            num_factors += 2
        if i * i == num:
            num_factors -= 1
    return num_factors

def find_triangle_number():
    found = False
    n = 1
    tri_num = 0
    while found == False:
        tri_num += n
        if factorize(tri_num) > 500:
            return tri_num
        n += 1
        
print find_triangle_number()
